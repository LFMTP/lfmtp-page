Sahlqvist’s correspondence theorem [7] is a fundamental theorem of modal logic that sheds light on the expressivity of modal logic with respect to first-order logic. We present a Coq [4] formalisation of this theorem for the “very simple Sahlqvist” class of modal formulae12, which is part of a broader project of formalising the correspondence theorem for the full Sahlqvist class. 

In order to state and prove the main theorem, we have produced Coq libraries for reasoning about deeply embedded modal formulae and appropriate fragments of first- and second-order logic. We adopt an elementary approach and discuss several benefits and challenges that come with this design choice. 

Moreover, the famous theorem states that first-order correspondents are effectively computable from their (very simple) Sahlqvist counterparts, which is an attribute that features more broadly in modal correspondence theory. This computational aspect has led to various algorithms and implementations being developed. One popular approach that Sahlqvist utilises is second-order quantifier 
elimination, an area that has progressed independently of this application to modal logic. Implementations of this method include DLS [1], SCAN [5, 6] and SQEMA [2]. Other approaches in correspondence theory include employing algebraic tools, as does the more recent ALBA [3].

Given the algorithmic content of correspondence theory, it is striking that there is no known work that utilises proof assistants to either verify the correctness of the algorithms or produce correct implementations. Our Coq formalisation of the proof of Sahlqvist’s correspondence theorem follows the original proof, including retaining the algorithmic content, thus allowing us to synthesise a Haskell program that computes first-order correspondents given very simple Sahlqvist modal formulae as inputs, automatically produced using Coq’s extraction facility. As such, this work paves the way for future formalisation efforts in algorithmic modal correspondence theory to utilise Coq’s synthesising capabilities in order to generate verified algorithms that correctly produce correspondents.

