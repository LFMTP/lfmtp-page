We present the FPC-Coq system, which illustrates a use of lambda Prolog in presenting to the Coq kernel proofs to check. In particular, we use the foundational proof certificate (FPC) framework for specifying the structure of proof evidence provided by external theorem provers. In FPC-Coq, FPC checkers are implemented as simple lambda Prolog programs. During the checking of a proof certificate, lambda Prolog can compute and capture fully detailed, dependently typed lambda-terms that can be checked by the Coq kernel. We use the recently released Coq-ELPI plugin for Coq in which the ELPI implementation of lambda Prolog can communicate with Coq. As a result of using this plugin, it is possible to provide an additional procedure (by going around Coq's tactic language) for building and submitting formal proofs to be checked by the Coq kernel. When using FPC-Coq, as with other Coq tools, one only needs to trust the Coq kernel and not, for example, the ELPI plugin. 

