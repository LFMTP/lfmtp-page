The Lax Logical Framework, LLFP, was introduced, by a team including the last two authors, to provide a conceptual framework for integrating different proof development tools, thus allowing for {\em external evidence} and for <em>postponing, delegating</em>, or <em>factoring-out</em>  side conditions. In particular, LLFP  allows for  <em>reducing</em> the number of times a <em>proof-irrelevant</em> check is performed. In this paper we give a shallow, actually <em>definitional</em>, implementation of LLFP in Coq, i.e. we use Coq both as host framework and oracle for LLFP. This illuminates the principles underpinning the mechanism of <em>Lock-types</em> and also suggests how to possibly extend Coq with the features of LLFP. The derived proof editor is then put to use for developing case-studies on an emerging paradigm, both at logical and implementation level, which we call <em>fast and loose reasoning</em> following Danielsson et <em>alii</em> [6]. This  paradigm trades off efficiency for correctness and amounts to postponing, or running in parallel, tedious or computationally demanding checks, until we are really sure that the intended goal can be achieved. Typical examples are branch-prediction in CPUs and optimistic concurrency control.
